pragma solidity >=0.6.0 <0.9.0;
pragma experimental ABIEncoderV2;

contract datastore {
address public owner;

event GrantRole (bytes32 indexed role, address indexed account);
event RemoveRole(bytes32 indexed role, address indexed account);


constructor (){

owner= . ’

_grantRole (Admin, : ) 3
}

mapping (string => uint []) public tagindex;

string [] public database;

uint counter=0;

mapping (bytes32 =>mapping(address=>bool)) public roles;

bytes32 private constant Admin = keccak256(abi.encodePacked( ))
bytes32 public constant Read = keccak256(abi.encodePacked/( ))
bytes32 public constant Write = keccak256(abi.encodePacked( ))

modifier onlyRole (bytes32 _role) {
require (roles[_rolell . 1, );

.
—- 2

function _grantRole(bytes32 _role, address _account) internal {

if (_role==Admin) {
roles [Admin] [_account]=true;
roles [Write] [_account]=true;
roles [Read] [_account]=true;
} else if (_role==Write) A
roles [Write] [_account]=true;
roles [Read] [_account]=true;
} elseq
roles[_role] [_account]=true;

emit GrantRole(_role, _account);

function grantAdminRole (address _account) external onlyRole (Admin) {

require (_account != address (0),
require (!roles [Admin] [_account],

if ( . == owner) A
_grantRole (Admin, _account);
} else {
revert ( );

);
 function grantWriteRole (address _account) external onlyRole (Admin)
 require (_account != address (0), );
 require (!roles [Write] [_account],
)
 _grantRole (Write, _account);


 function grantReadRole (address _account) external onlyRole (Admin) {
 require (_account != address (0), );
 require (!roles [Read] [_account],
)
 _grantRole (Read, _account);


 function deleteAdminRole (address _account) external onlyRole (Admin) {
 require (roles [Admin] [_account],
)
if ( . == owner) A
 deleteRole (Admin, _account) ;
 } else {
 revert ( );

 function deleteWriteRole (address _account) external onlyRole (Admin) {
 require (roles [Write] [_account],
Ds
 deleteRole (Write, _account);

 function deleteReadRole (address _account) external onlyRole (Admin) {
 require (roles [Read] [_account],
)

 deleteRole (Read, _account) ;

 function deleteRole(bytes32 _role, address _account) internal onlyRole(

Admin) A
 if (_role==Admin) {
 roles [Admin] [_account]=false;
 roles [Write] [_account]=false;
 roles [Read] [_account]=false;
 } else if(_role==Write) {
 roles [Write] [_account]=false;
 roles [Read] [_account]=false;
 } else {
 roles [_role][_account]=false;

 emit RemoveRole(_role, _account);

 function write(string memory tag, string memory ) public onlyRole(

Write) A
 database. push ( );
 tagindex [tag]. push (counter) ;
 counter ++;


 function read(string memory tag) public onlyRole (Read) view returns (

string [] memory) {
 uint [] memory indices = tagindex[tagl;
 uint length = indices.length;
 string [] memory result = new stringl[] (length);
 for (uint i=0;i<length;i++){

 string memory entry = database[indices[il]


function readall () public onlyRole(Read) view returns (string [] memory)



function readrecent(uint n) public onlyRole(Read) view returns (string



function getDatabaseSize () public onlyRole(Read) view returns (uint) {

result [i] = entry;


return result;

{

return database;

[] memory) {
if(n >= counter) A
return database;



string [] memory result = new stringl](n);

for (uint i=0;i<n;i++){
string memory entry = database [counter-i-1];
result [i] = entry;



return result;

return counter;
